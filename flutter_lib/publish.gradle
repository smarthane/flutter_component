/**************************************************
 *  @author smarthane
 *  @time 2020/1/1 10:55
 *  @describe 上传flutter module aar到maven私服
 **************************************************/
apply plugin: 'maven'

def libGroupId = flutterLibGroupId.toString()
def libArtifactId = flutterLibArtifactId.toString()
def libVersion = flutterLibVersion.toString()
def localRepoPath = "${rootProject.projectDir}/flutter_module/build/host/outputs/repo"

uploadArchives {
    repositories {
        mavenDeployer {
            if (isPublishLocal.toBoolean()) {
                repository(url : uri(localRepoPath))
            } else {
                repository(url: repoUrl) {
                    authentication(userName: nexusUsername, password: nexusPassword)
                }
            }
            pom.groupId = libGroupId
            pom.artifactId = libArtifactId
            pom.version = libVersion
            pom.packaging = 'aar'
        }
    }
}

apply plugin: 'maven-publish'

def moduleRepoDirs = new File(localRepoPath)
if (!moduleRepoDirs.exists()) {
    moduleRepoDirs.mkdirs()
}
def fileList = new ArrayList<File>()
def fileMap = new HashMap<File, File>()
moduleRepoDirs.eachFileRecurse {
    if (it.name.endsWith('.aar') || it.name.endsWith('.pom')) {
        fileList.add(it)
    }
}
def i = 0
while (i < fileList.size()) {
    fileMap.put(fileList.get(i), fileList.get(i+1))
    i = i + 2
}

publishing {
    publications {
        fileMap.each { entry ->
            def project = new XmlParser().parse(entry.value)
            def mGroupId = project.groupId.text()
            def mArtifactId = project.artifactId.text()
            def mVersion = project.version.text()
            def taskId = mGroupId + "-" +mArtifactId + "-" + mVersion
            publishing.publications.create(taskId, MavenPublication) {
                artifact entry.key
                groupId mGroupId
                artifactId mArtifactId
                version mVersion
                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    project.dependencies.dependency.each {
                        def itGroupId = it.groupId.text()
                        def itArtifactId = it.artifactId.text()
                        def itVersion = it.version.text()
                        def itScope = it.scope.text()
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', itGroupId)
                        dependencyNode.appendNode('artifactId', itArtifactId)
                        dependencyNode.appendNode('version', itVersion)
                        dependencyNode.appendNode('scope', itScope)
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url repoUrl
            credentials {
                username = nexusUsername
                password = nexusPassword
            }
        }
    }
}

